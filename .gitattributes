import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk


class SocialTrackrApp:
    def __init__(self, root):
        """Initialize the main application window."""
        self.root = root
        self.root.title("Social Trackr")
        self.root.geometry("600x500")
        
        # Welcome Screen
        self.frame_main = ttk.Frame(root, padding=20)
        self.frame_main.pack(fill="both", expand=True)

        label_welcome = ttk.Label(self.frame_main, text="Welcome to Social Trackr!", font=("Helvetica", 18))
        label_welcome.pack(pady=10)

        label_instruction = ttk.Label(
            self.frame_main,
            text="Choose a platform below to track data:",
            font=("Helvetica", 12),
        )
        label_instruction.pack(pady=5)

        self.platforms = ["Facebook", "Instagram", "TikTok", "X (Twitter)"]
        self.combo_platform = ttk.Combobox(self.frame_main, values=self.platforms, state="readonly")
        self.combo_platform.set("Pick a Platform")
        self.combo_platform.pack(pady=10)

        btn_next = ttk.Button(self.frame_main, text="Proceed", command=self.open_platform_window)
        btn_next.pack(pady=5)

        btn_exit = ttk.Button(self.frame_main, text="Exit", command=self.exit_app)
        btn_exit.pack(pady=5)

        # Add Image
        self.load_image()

    def load_image(self):
        """Load and display an image in the main window."""
        image = Image.open("social_media.jpg")
        image = image.resize((300, 200), Image.ANTIALIAS)
        self.img = ImageTk.PhotoImage(image)

        label_image = ttk.Label(self.frame_main, image=self.img)
        label_image.image = self.img  # Keep reference to avoid garbage collection
        label_image.pack(pady=10)

    def open_platform_window(self):
        """Open a new window based on the selected platform."""
        platform = self.combo_platform.get()

        if platform not in self.platforms:
            messagebox.showerror("Error", "Please select a valid platform!")
            return

        new_window = tk.Toplevel(self.root)
        new_window.title(f"{platform} Data Tracker")
        new_window.geometry("600x500")

        # Labels
        label_header = ttk.Label(new_window, text=f"Track {platform} Data", font=("Helvetica", 16))
        label_header.pack(pady=10)

        label_instruction = ttk.Label(
            new_window,
            text="Enter your User ID to retrieve data:",
            font=("Helvetica", 12),
        )
        label_instruction.pack(pady=5)

        # Entry Box
        entry_user_id = ttk.Entry(new_window, width=30)
        entry_user_id.pack(pady=5)

        # Buttons
        btn_fetch = ttk.Button(
            new_window,
            text="Fetch Data",
            command=lambda: self.fetch_data(platform, entry_user_id.get(), new_window),
        )
        btn_fetch.pack(pady=5)

        btn_back = ttk.Button(new_window, text="Back", command=new_window.destroy)
        btn_back.pack(pady=5)

    def fetch_data(self, platform, user_id, window):
        """Simulate data retrieval for the selected platform."""
        if not user_id.strip():
            messagebox.showerror("Error", "User ID cannot be empty!")
            return

        if not user_id.isalnum():
            messagebox.showerror("Error", "Invalid User ID format!")
            return

        # Simulated data fetching (replace with actual API calls if needed)
        result = f"Data fetched for {platform} User ID: {user_id}\n\n[Sample Data Display]"
        messagebox.showinfo(f"{platform} Data", result)

    def exit_app(self):
        """Exit the application."""
        confirm = messagebox.askyesno("Exit", "Are you sure you want to exit?")
        if confirm:
            self.root.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    app = SocialTrackrApp(root)
    root.mainloop()
